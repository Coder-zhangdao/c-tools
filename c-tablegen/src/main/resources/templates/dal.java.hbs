package {{config.packageName}}.{{tableName}}.dal;

{{> [header-comment.java]}}

import java.sql.*;
import java.util.List;
import javax.sql.DataSource;
import com.bixuebihui.test.business.*;
import com.bixuebihui.test.pojo.*;
import com.bixuebihui.jdbc.RowMapperResultReader;
import com.bixuebihui.test.BaseList;

public class {{className}}  extends BaseList<{{pojoClassName}}, {{firstKeyType}}>
{
    {{! writeDALConstructor(tableName); }}
    /**
      * Don't direct use the {{className}}, use {{pojoClassName}}Manager instead.
      */
    protected {{className}}(DataSource ds)
    {
        super(ds);
    }

    {{! writeSql(colData, keyData); }}
    public static final class F{
        {{#each fields ~}}
        public static final String {{constantName this.name}} = "{{this.name}}";
        {{/each}}
        public static String[] getAllFields() {
            return new String[] { {{#each fields}}{{constantName this.name}}{{#unless @last}}, {{/unless}}{{/each}} };
        }
    }

    @Override
    protected String getDeleteSql(){
        return "delete from {{tableName}} where {{#each keys}} {{this}}=?{{#unless @last}} and {{/unless}}{{/each}} ";
    }

   @Override
   protected String getInsertSql(){
       return "insert into {{tableName}} ( {{#each fields ~}}
            {{#if (not (and config.isUse_autoincrement this.isAutoIncrement)) ~}} {{ name }} {{#unless @last}},{{/unless ~}} {{/if ~}}
            {{/each ~}} ) values ( {{#each fields ~}}
            {{#if (not (and config.isUse_autoincrement this.isAutoIncrement)) }} ? {{#unless @last}},{{/unless}} {{/if ~}}
            {{/each ~}}
            )";
   }


    @Override
    protected String getUpdateSql(){
        return "update {{tableName}} set {{#each fields ~}}
            {{#eq config.versionColName name ~}} {{name}}= {{name}} +1 {{else}} {{name}}=? {{/eq ~}}
            {{~#unless @last}},{{/unless~}}
            {{~/each}} {{whereNotLike}}";
    }

    {{! writeObjs(tableName, keyData, colData); }}
   @Override
   protected Object[] getInsertObjs({{pojoClassName}} info){
        return new Object[]{ {{insertObjects}} };
   }

   @Override
   protected Object[] getUpdateObjs({{pojoClassName}}  info){
      return new Object[]{ {{updateObjects}} };
   }

    {{! writeGetTableName(tableName, "getTableName", false); }}
    /**
     * Get table name.
     */
    @Override
    public String getTableName()
    {
       return  "{{tableName}}";
    }

    {{!    writeGetKeyName(getFirstKeyName(keyData)); }}
    /**
    * Get key name.
    */
    @Override
    public String getKeyName()
    {
        return  F.{{constantName firstKeyName}};
    }

{{!    writeMapRow(tableName, colData); }}
{{{mapRow}}}

{{! writeGetSetId(tableName, keyData, colData);}}
    @Override
    public {{firstKeyType}} getId({{pojoClassName}} info) {
        return info.get{{firstUp firstKeyName}}();
    }

    @Override
    public void setId({{pojoClassName}} info, {{firstKeyType}} id) {
    {{#if hasKey}}
        info.set{{firstUp firstKeyName}}(id);
    {{else}}
        //no key to set, don't this method!
    {{/if ~}}
    }

    @Override
    public void setIdLong({{pojoClassName}} info, long id) {
    {{#if hasKey}}
        info.set{{firstUp firstKeyName}}(({{firstKeyType}})id);
    {{else}}
        //no key to set, don't this method!
    {{/if}}
    }
{{! writeGetNextKey(keyData, colData); }}
    {{#if hasKey}}
      {{#eq firstKeyType "Timestamp"}}
          public {{firstKeyType}} getNextKey(){
        return new Timestamp(new java.util.Date().getTime());
          }
      {{/eq}}
      {{#eq firstKeyType "String"}}
          public {{firstKeyType}} getNextKey(){
          return java.util.UUID.randomUUID().toString();
          }
      {{/eq}}
      {{#gt keys.size 1}}
          public {{firstKeyType}} getNextKey(){
          throw new IllegalStateException("no autokey for union keys");
          }
      {{/gt}}

    {{#if hasVersionCol}}
    {{! writeUpdate(tableName, keyData, "updateByKeyAndVersion", false, withVersion, colData); }}

    /**
     * Updates the current object values into the database with version condition as an optimistic database lock.
     */
    public boolean updateByKeyAndVersion({{pojoClassName}}  info, Connection cn) throws SQLException
    {
       return 1 == dbHelper.executeNoQuery(getUpdateSql()+" and {{config.versionColName}}=?", new Object[]{
        {{#each fields}}
            {{#eq name config.versionColName}}
            {{~ else ~}}
                info.get{{firstUp name}}(),
            {{/eq}}
        {{/each}}
        {{keyObjects}},info.get{{firstUp config.versionColName}}()
        , cn );
    }

    public boolean updateByKeyAndVersion({{pojoClassName}}  info) throws SQLException
    {
        return 1 == dbHelper.executeNoQuery(getUpdateSql()+" and {{config.versionColName}}=?", new Object[]{
        {{#each fields}}
            {{#eq name config.versionColName}}
            {{~ else ~}}
                info.get{{firstUp name}}(),
            {{/eq}}
        {{/each}}
        {{keyObjects}},info.get{{firstUp config.versionColName}}()
        });
    }
    {{/if}}

    {{! writeDelete(tableName, keyData, "deleteByKey", false, colData);}}
    /**
     * Deletes from the database for table {{tableName}} with connection
     */
    @Override
    public boolean deleteByKey( {{#each keys}} {{colType tableName this}} {{this}}, {{/each}}  Connection cn ) throws SQLException
    {
        return 1 <= dbHelper.executeNoQuery(getDeleteSql(), new Object[]{ {{#each keys}} {{this}} {{#unless @last}}, {{/unless}} {{/each}} }, cn);
    }

    /**
    * Deletes from the database for table {{tableName}}
    */
    @Override
    public boolean deleteByKey( {{#each keys}} {{colType tableName this}} {{this}} {{#unless @last}}, {{/unless}}{{/each}}) throws SQLException
    {
        return 1 <= dbHelper.executeNoQuery(getDeleteSql(), new Object[]{ {{#each keys}} {{this}} {{#unless @last}}, {{/unless}} {{/each}} });
    }

{{else}}
    {{! writeDummyUpdate(tableName, "updateByKey"); }}
    @Override
    public boolean updateByKey({{pojoClassName}} info) throws SQLException {
        throw new SQLException("This operation is not supported, because table {{tableName}} not have a unique key!");
    }

     {{! writeDummyDelete(tableName, keyData, "deleteByKey", colData); }}
    @Override
    public boolean deleteByKey({{firstKeyType}}  key) throws SQLException {
        throw new SQLException("This operation is not supported, because table {{ tableName }} not have a unique key!");
    }

{{/if}}

{{#each foreignKeyData}}
    /**
     * Imported {{tableName}}  PK: {{this.pKTableName}}  FK:{{this.fKTableName}}
     */"
    public {{getPojoClassName this.pkTableName}} get{{getPojoClassName this.pkTableName}}By{{this.fKColumnName}}(
    {{#each this.fKFields as | field |}}{{colType tableName field.name}} {{field.name}}{{#unless @last}},{{/unless}}{{/each}}) throws SQLException
    {
        {{getPojoClassName this.pkTableName}}Manager x = new {{getPojoClassName this.pkTableName}}Manager(this.getDbHelper().getDataSource());
        return x.selectByKey({{this.fKColList}});
    }

    /**
    * Select from the database for table {{tableName}} "
    */
    public List<{{pojoClassName}}> selectBy{{firstUp this.fKTableName}}{{firstUp this.fKColumnName}}(  {{#each this.fKFields as | field |}}{{colType tableName field.name}} {{field.name}}{{#unless @last}},{{/unless}}{{/each}}) throws SQLException
    {
        String query = "select * from {{tableName}}";
        String where = " where {{#each this.fKFields}} {{this}}=?{{#unless @last}} and {{/unless}}{{/each}}";

        String query = query + where ;
        return dbHelper.executeQuery(query,
            new Object[]{ {{#each this.fKFields }} {{name}} {{#unless @last}},{{/unless}} {{/each}} },
            new RowMapperResultReader<{{pojoClassName}}>(this));
    }

{{/each}}

{{#each exportedKeys}}
    /**
    * Get all related  {{this.fKTableName}} which have same {{this.fKColList}}
    */
    public List<{{getPojoClassName this.fkTableName}}> getRelated{{firstUp this.fkTableName}}{{firstUp this.fKColumnName}}(
    {{#each this.fKFields as | field |}}{{colType tableName field.name}} {{field.name}}{{#unless @last}},{{/unless}}{{/each}}) throws SQLException
    {
        {{getPojoClassName this.fKTableName}}Manager x = new {{getPojoClassName this.fKTableName}}Manager(this.getDbHelper().getDataSource());
        return x.selectBy{{this.fKTableName}}__{{this.fKColumnName}}({{#each this.pKColList}} {{name}} {{#unless @last}},{{/unless}} {{/each}});
    }
{{/each}}

{{! foreign key }}
{{#if config.indexes}}{{#not indexData.empty}}


    /**
    * Select from the database for table {{tableName}} "
    */
    public List<{{pojoClassName}}> selectByIndex(  {{#each indexData as | field |}}{{colType tableName field.name}} {{field.name}}{{#unless @last}},{{/unless}}{{/each}}) throws SQLException
    {
        String query = "select * from {{tableName}}";
        String where = " where {{#each this.indexData}} {{this}}=?{{#unless @last}} and {{/unless}}{{/each}}";
        String query = query + where ;

        List<{{pojoClassName}}> info = dbHelper.executeQuery(query, Object[]{
          {{#each indexData}} {{this}} {{#unless @last}}, {{/unless}} {{/each}} } , new RowMapperResultReader<" + getPojoClassName(tableName) + ">(this));");
        if(info!=null && info.size()>0) {
          return  info.get(0);
        }
        return null;
    }


{{/not}}{{/if}}
{{!
            if (config.indexes) {
            List<String> indexData = getTableIndexes(tableName); // updates the indexData
                // variable
                if (isNotEmpty(indexData)) {
                writeSelect(tableName, indexData, "selectByIndex", colData);
                writeSelectAll(tableName, indexData, false, "selectAllLikeIndex", true, colData);

                writeUpdate(tableName, indexData, "updateByIndex", false, false, colData);
                writeUpdate(tableName, indexData, "updateByIndex", true, false, colData);

                writeDelete(tableName, indexData, "deleteByIndex", false, colData);
                writeDelete(tableName, indexData, "deleteByIndex", true, colData);
                writeCount(indexData, false, "countByIndex", colData);
                writeCount(indexData, true, "countLikeIndex", colData);

                }
                }

                writeInsertDummy(tableName, keyData, "insertDummy", colData);
}}
}
